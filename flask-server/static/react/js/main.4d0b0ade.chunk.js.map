{"version":3,"sources":["Intersect.svg","serviceWorker.js","Welcome.js","EmotionAnalyser.js","ChatAgent.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Welcome","console","log","this","props","className","Image","src","WelcomeImage","alt","fluid","width","onClick","React","Component","EmotionAnalyser","_isMounted","state","loading","result","trigger","user_input","previousStep","message","axios","post","user_text","then","response","setState","data","triggerNextStep","catch","error","defaultProps","steps","undefined","ChatAgent","theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","botFontSize","userBubbleColor","userFontColor","headerTitle","botAvatar","id","user","component","waitAction","asMessage","end","App","welcome","chat","changeWelcome","bind","chatagent","Container","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.4d0b0ade.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/Intersect.cb816544.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport WelcomeImage from './Intersect.svg'\nimport Image from 'react-bootstrap/Image'\n\n\nclass Welcome extends React.Component{\n\n\n  render(){\n    console.log(this.props)\n\n    return(\n      <div className=\"welcome-container\">\n\n        <Image src={WelcomeImage} alt=\"Image\" fluid width=\"500\" onClick={this.props.onClick}/>\n        \n        <div className=\"welcome-content\">\n          <div className=\"text_shadows\">\n          Hello, I'm AIsha\n          </div>\n        </div>\n      \n      </div>\n      \n    )\n  }\n}\n\nexport default Welcome","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ChatBot, { Loading } from 'react-simple-chatbot';\nimport axios from 'axios';\n\n\nclass EmotionAnalyser extends Component {\n  _isMounted = false;\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      result: '',\n      trigger: false,\n    };\n  }\n\n  componentDidMount() {\n    this._isMounted = true\n    var user_input = this.props.previousStep.message\n    axios.post('http://127.0.0.1:5000/api/help',{\n      user_text: user_input \n    })\n    .then((response) => {\n      if(this._isMounted){\n        console.log(\"We're inside the response\")\n        console.log(\"We're about to setState\")\n        this.setState({\n          loading: false, \n          result: response.data['bot_response'],\n          trigger: true\n        }, ()=> {\n            this.props.triggerNextStep()\n        })\n      }\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  componentWillUnmount(){\n    console.log(\"We're about to componentWillUnmount\")\n    this._isMounted = false;\n  }\n\n  render() {\n    const { trigger, loading, result } = this.state;\n\n    return (\n      <div className=\"dbpedia\">\n        { loading ? <Loading /> : result }\n      </div>\n    );\n  }\n}\n\nEmotionAnalyser.propTypes = {\n  steps: PropTypes.object,\n  triggerNextStep: PropTypes.func,\n};\n\nEmotionAnalyser.defaultProps = {\n  steps: undefined,\n  triggerNextStep: undefined,\n};\n\nexport default EmotionAnalyser","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ChatBot, { Loading } from 'react-simple-chatbot';\nimport EmotionAnalyser from './EmotionAnalyser'\nimport WelcomeImage from './Intersect.svg'\nimport {ThemeProvider} from 'styled-components'\n\n\nclass ChatAgent extends React.Component{\n  constructor(props){\n    super(props)\n\n\n  }\n  \n  render(){\n    const theme =  {\n      background: '#f5f8fb',\n      fontFamily: 'Sans Serif',\n      headerBgColor: '#EF6C00',\n      headerFontColor: '#fff',\n      headerFontSize: '20px',\n      botBubbleColor: '#0368F5',\n      botFontColor: '#fff',\n      botFontSize: '18px',\n      userBubbleColor: '#EA8C55',\n      userFontColor: '#fff',\n    }\n\n    return(\n      <div className=\"chatagent-container\">\n        <ThemeProvider theme={theme}>\n          <ChatBot\n            headerTitle=\"AIsha\"\n            botAvatar = {WelcomeImage}\n            // speechSynthesis={{ enable: true, lang: 'en' }}\n            steps={[\n              {\n                id: '1',\n                message: \"Hi, I'm AIsha\",\n                trigger: '2',\n              },\n              {\n                id: '2',\n                message: \"I'm here to help you\",\n                trigger: '3'\n              },\n              {\n                id: '3',\n                message: \"How are you feeling?\",\n                trigger: 'emotion'\n              },\n              {\n                id: 'emotion',\n                user: true,\n                trigger: '4',\n              },\n              {\n                id: '4',\n                component: <EmotionAnalyser />,\n                waitAction: true,\n                asMessage: true, /*is a component*/\n                trigger: '5',\n              },\n              {\n                id: '5',\n                message: ({steps}) =>\n                  `Thanks for telling me, son`,\n                end: true\n              }\n            ]}\n          />\n        </ThemeProvider>\n      </div>\n    )\n  }\n};\n\nexport default ChatAgent;","import React from 'react';\nimport { render } from 'react-dom';\nimport Welcome from './Welcome';\nimport Container from 'react-bootstrap/Container'\nimport './App.scss'\nimport ChatAgent from './ChatAgent';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n\n    this.state = {\n      welcome: true,\n      chat: false\n    }\n    this.changeWelcome=this.changeWelcome.bind(this)\n  }\n\n  changeWelcome(){\n    this.setState({\n      welcome: false\n    })\n  }\n\n  render(){\n    let welcome = (\n      <Welcome onClick={this.changeWelcome} />\n    )\n\n    let chatagent = null;\n\n    if(this.state.welcome===false){\n      welcome = null;\n      chatagent = (\n        <ChatAgent />\n      )\n    }\n\n    return(\n      <Container>\n        {welcome}\n        {chatagent}\n      </Container>\n    )\n  }\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}