{"version":3,"sources":["Intersect.svg","serviceWorker.js","Welcome.js","EmotionAnalyser.js","ChatAgent.js","loginsignup.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Welcome","console","log","this","props","className","Image","src","WelcomeImage","alt","fluid","width","onClick","React","Component","EmotionAnalyser","state","loading","result","trigger","user_input","previousStep","message","axios","post","user_text","then","response","setState","data","triggerNextStep","catch","error","defaultProps","steps","undefined","ChatAgent","theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","botFontSize","userBubbleColor","userFontColor","headerTitle","botAvatar","id","user","component","waitAction","asMessage","end","errorStyles","color","LoginSignUp","onChange","e","target","value","changeView","view","currentView","name","password","email","error_text","onSubmit","onSubmitSignUp","style","type","required","onSubmitLogin","bind","event","preventDefault","App","welcome","chat","changeWelcome","movetoChat","loginsignup","chatagent","Container","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.456bdeef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/Intersect.cb816544.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport WelcomeImage from './Intersect.svg'\nimport Image from 'react-bootstrap/Image'\n\n\nclass Welcome extends React.Component{\n\n\n  render(){\n    console.log(this.props)\n\n    return(\n      <div className=\"welcome-container\">\n\n        <Image src={WelcomeImage} alt=\"Image\" fluid width=\"500\" onClick={this.props.onClick}/>\n        \n        <div className=\"welcome-content\">\n          <div className=\"text_shadows\">\n          Hello, I'm AIsha\n          </div>\n        </div>\n      \n      </div>\n      \n    )\n  }\n}\n\nexport default Welcome","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ChatBot, { Loading } from 'react-simple-chatbot';\nimport axios from 'axios';\n\n\nclass EmotionAnalyser extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      result: '',\n      trigger: false,\n    };\n  }\n\n  componentDidMount() {\n    var user_input = this.props.previousStep.message\n    axios.post('/api/help',{\n      user_text: user_input \n    })\n    .then((response) => {\n      this.setState({\n        loading: false, \n        result: response.data['bot_response'],\n        trigger: true\n      }, ()=> {\n        this.props.triggerNextStep()\n      })\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  render() {\n    const { trigger, loading, result } = this.state;\n\n    return (\n      <div className=\"emotionanalyser\">\n        { loading ? <Loading /> : result }\n      </div>\n    );\n  }\n}\n\nEmotionAnalyser.propTypes = {\n  steps: PropTypes.object,\n  triggerNextStep: PropTypes.func,\n};\n\nEmotionAnalyser.defaultProps = {\n  steps: undefined,\n  triggerNextStep: undefined,\n};\n\nexport default EmotionAnalyser","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ChatBot, { Loading } from 'react-simple-chatbot';\nimport EmotionAnalyser from './EmotionAnalyser'\nimport WelcomeImage from './Intersect.svg'\nimport {ThemeProvider} from 'styled-components'\n\n\nclass ChatAgent extends React.Component{\n  constructor(props){\n    super(props)\n\n\n  }\n  \n  render(){\n    const theme =  {\n      background: '#f5f8fb',\n      fontFamily: 'Sans Serif',\n      headerBgColor: '#EF6C00',\n      headerFontColor: '#fff',\n      headerFontSize: '20px',\n      botBubbleColor: '#0368F5',\n      botFontColor: '#fff',\n      botFontSize: '18px',\n      userBubbleColor: '#EA8C55',\n      userFontColor: '#fff',\n    }\n\n    return(\n      <div className=\"chatagent-container\">\n        <ThemeProvider theme={theme}>\n          <ChatBot\n            headerTitle=\"AIsha\"\n            botAvatar = {WelcomeImage}\n            // speechSynthesis={{ enable: true, lang: 'en' }}\n            steps={[\n              {\n                id: '1',\n                message: \"Hi, I'm AIsha\",\n                trigger: '2',\n              },\n              {\n                id: '2',\n                message: \"I'm here to help you\",\n                trigger: '3'\n              },\n              {\n                id: '3',\n                message: \"How are you feeling?\",\n                trigger: 'emotion'\n              },\n              {\n                id: 'emotion',\n                user: true,\n                trigger: '4',\n              },\n              {\n                id: '4',\n                component: <EmotionAnalyser />,\n                waitAction: true,\n                asMessage: true, /*is a component*/\n                trigger: '5',\n              },\n              {\n                id: '5',\n                message: ({steps}) =>\n                  `Thanks for telling me, son`,\n                end: true\n              }\n            ]}\n          />\n        </ThemeProvider>\n      </div>\n    )\n  }\n};\n\nexport default ChatAgent;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nimport './loginsignup.scss';\n\nconst { Component } = React\n\nconst errorStyles = {\n  color: 'red'\n};\nclass LoginSignUp extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      currentView: \"signUp\",\n      name: '',\n      password: '',\n      email: '',\n      error: '',\n      error_text: ''\n    }\n    this.onSubmitSignUp=this.onSubmitSignUp.bind(this);\n    this.onSubmitLogin=this.onSubmitLogin.bind(this);\n    this.onChange=this.onChange.bind(this);\n  }\n\n  onChange = (e) => {\n    this.setState({ [e.target.id]: e.target.value });\n  }\n\n  onSubmitSignUp(event){\n\n    event.preventDefault();\n    var email = this.state.email\n    var name = this.state.name\n    var password = this.state.password\n    \n    axios.post('http://127.0.0.1:5000/signup',{\n      email: email,\n      name: name,\n      password: password\n    })\n    .then((response) => {\n        console.log(\"sign up response recieved\")\n        console.log(response.data.error)\n        console.log(response.data.data)\n        if (response.data.error === true){\n          this.setState({\n            error: true,\n            error_text: response.data.data\n         })\n        } else {\n          this.props.onSubmit()\n        }\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  onSubmitLogin(event){\n\n    event.preventDefault();\n    var email = this.state.email\n    var password = this.state.password\n    \n    axios.post('http://127.0.0.1:5000/login',{\n      email: email,\n      password: password\n    })\n    .then((response) => {\n      console.log(\"login response recieved\")\n      console.log(response.data.error)\n      console.log(response.data.data)\n      if (response.data.error === true){\n        this.setState({\n          error: true,\n          error_text: response.data.data\n       })\n      } else {\n        this.props.onSubmit()\n      }\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  changeView = (view) => {\n    this.setState({\n      currentView: view,\n      name: '',\n      password: '',\n      email: '',\n      error: '',\n      error_text: ''\n    })\n  }\n \n  currentView = () => {\n    switch(this.state.currentView) {\n      case \"signUp\":\n        return (\n          <form onSubmit={this.onSubmitSignUp}>\n            <h2>Sign Up!</h2>\n            <fieldset>\n              <legend>Create Account</legend>\n              <ul>\n                <li>\n                  <label style={errorStyles}>{this.state.error_text}</label>\n                </li>\n                <li>\n                  <label>Name:<br></br>\n                    <input type=\"text\" onChange={this.onChange} value={this.state.name} id=\"name\" required/>\n                  </label>\n                </li>\n                <li>\n                  <label>Email:<br></br>\n                    <input type=\"email\" onChange={this.onChange} value={this.state.email} id=\"email\" required/>\n                  </label>\n                </li>\n                <li>\n                  <label>Password:<br></br>\n                    <input type=\"password\" onChange={this.onChange} value={this.state.password} id=\"password\" required/>\n                  </label>\n                </li>\n              </ul>\n            </fieldset>\n            <button>Submit</button>\n            <button type=\"button\" onClick={ () => this.changeView(\"logIn\")}>Have an Account?</button>\n          </form>\n        )\n      case \"logIn\":\n        return (\n          <form onSubmit={this.onSubmitLogin}>\n            <h2>Welcome Back!</h2>\n            <fieldset>\n              <legend>Log In</legend>\n              <ul>\n                <li>\n                  <label style={errorStyles}>{this.state.error_text}</label>\n                </li>\n                <li>\n                  <label>Email:<br></br>\n                    <input type=\"email\" id=\"email\" onChange={this.onChange} value={this.state.email} required/>\n                  </label>\n                </li>\n                <li>\n                  <label>Password:<br></br>\n                    <input type=\"password\" id=\"password\" onChange={this.onChange} value={this.state.password} required/>\n                  </label>\n                </li>\n              </ul>\n            </fieldset>\n            <button>Login</button>\n            <button type=\"button\" onClick={ () => this.changeView(\"signUp\")}>Create an Account</button>\n          </form>\n        )\n      default:\n        break\n    }\n  }\n\n  render() {\n    return (\n      <section id=\"entry-page\">\n        {this.currentView()}\n      </section>\n    )\n  }\n}\n\nexport default LoginSignUp;","import React from 'react';\nimport { render } from 'react-dom';\nimport Welcome from './Welcome';\nimport Container from 'react-bootstrap/Container'\nimport './App.scss'\nimport ChatAgent from './ChatAgent';\nimport LoginSignup from './loginsignup'\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n\n    this.state = {\n      welcome: true,\n      chat: false\n    }\n    this.changeWelcome=this.changeWelcome.bind(this)\n    this.movetoChat=this.movetoChat.bind(this)\n  }\n\n  changeWelcome(){\n    this.setState({\n      welcome: false\n    })\n  }\n\n  movetoChat(){\n    this.setState({\n      chat: true\n    })\n  }\n\n  render(){\n    let welcome = (\n      <Welcome onClick={this.changeWelcome} />\n    )\n\n    let loginsignup = null;\n    let chatagent = null;\n\n    if(this.state.welcome===false){\n      welcome = null;\n      loginsignup = (\n        <LoginSignup onSubmit={this.movetoChat}/>\n      )\n    }\n\n    if(this.state.chat===true){\n      loginsignup = null;\n      chatagent = (\n        <ChatAgent />\n      )  \n    }\n\n    return(\n      <Container>\n        {welcome}\n        {loginsignup}\n        {chatagent}\n      </Container>\n    )\n  }\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}