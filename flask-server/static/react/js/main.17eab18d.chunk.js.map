{"version":3,"sources":["serviceWorker.js","EmotionAnalyser.js","Chatagent.js","index.js"],"names":["Boolean","window","location","hostname","match","EmotionAnalyser","props","state","loading","result","trigger","user_input","this","previousStep","message","axios","post","user_text","then","response","setState","data","triggerNextStep","catch","error","console","log","className","Component","defaultProps","steps","undefined","ChatAgent","headerTitle","id","user","component","waitAction","asMessage","end","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qECZAC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,SAAS,EACTC,OAAQ,GACRC,SAAS,GANM,E,gEAUE,IAAD,OACdC,EAAaC,KAAKN,MAAMO,aAAaC,QACzCC,IAAMC,KAAK,YAAY,CACrBC,UAAWN,IAEZO,MAAK,SAACC,GACL,EAAKC,SAAS,CACZZ,SAAS,EACTC,OAAQU,EAASE,KAAT,aACRX,SAAS,IACR,WACD,EAAKJ,MAAMgB,wBAGdC,OAAM,SAAUC,GACfC,QAAQC,IAAIF,Q,+BAIN,IAAD,EAC8BZ,KAAKL,MAAzBC,GADV,EACCE,QADD,EACUF,SAASC,EADnB,EACmBA,OAE1B,OACE,yBAAKkB,UAAU,WACXnB,EAAU,kBAAC,UAAD,MAAcC,O,GAnCJmB,aA8C9BvB,EAAgBwB,aAAe,CAC7BC,WAAOC,EACPT,qBAAiBS,GAGJ1B,QCTA2B,EA1CG,kBAChB,kBAAC,IAAD,CACEC,YAAY,QAEZH,MAAO,CACL,CACEI,GAAI,IACJpB,QAAS,gBACTJ,QAAS,KAEX,CACEwB,GAAI,IACJpB,QAAS,uBACTJ,QAAS,KAEX,CACEwB,GAAI,IACJpB,QAAS,uBACTJ,QAAS,WAEX,CACEwB,GAAI,UACJC,MAAM,EACNzB,QAAS,KAEX,CACEwB,GAAI,IACJE,UAAW,kBAAC,EAAD,MACXC,YAAY,EACZC,WAAW,EACX5B,QAAS,KAEX,CACEwB,GAAI,IACJpB,QAAS,cAAEgB,MAAF,oCAETS,KAAK,OCpCbC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SHyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMV,c","file":"js/main.17eab18d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ChatBot, { Loading } from 'react-simple-chatbot';\nimport axios from 'axios';\n\n\nclass EmotionAnalyser extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      result: '',\n      trigger: false,\n    };\n  }\n\n  componentDidMount() {\n    var user_input = this.props.previousStep.message\n    axios.post('/api/help',{\n      user_text: user_input \n    })\n    .then((response) => {\n      this.setState({\n        loading: false, \n        result: response.data['bot_response'],\n        trigger: true\n      }, ()=> {\n        this.props.triggerNextStep()\n      })\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  render() {\n    const { trigger, loading, result } = this.state;\n\n    return (\n      <div className=\"dbpedia\">\n        { loading ? <Loading /> : result }\n      </div>\n    );\n  }\n}\n\nEmotionAnalyser.propTypes = {\n  steps: PropTypes.object,\n  triggerNextStep: PropTypes.func,\n};\n\nEmotionAnalyser.defaultProps = {\n  steps: undefined,\n  triggerNextStep: undefined,\n};\n\nexport default EmotionAnalyser","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ChatBot, { Loading } from 'react-simple-chatbot';\nimport EmotionAnalyser from './EmotionAnalyser'\n\n\nconst ChatAgent = () => (\n  <ChatBot\n    headerTitle=\"AIsha\"\n    // speechSynthesis={{ enable: true, lang: 'en' }}\n    steps={[\n      {\n        id: '1',\n        message: \"Hi, I'm AIsha\",\n        trigger: '2',\n      },\n      {\n        id: '2',\n        message: \"I'm here to help you\",\n        trigger: '3'\n      },\n      {\n        id: '3',\n        message: \"How are you feeling?\",\n        trigger: 'emotion'\n      },\n      {\n        id: 'emotion',\n        user: true,\n        trigger: '4',\n      },\n      {\n        id: '4',\n        component: <EmotionAnalyser />,\n        waitAction: true,\n        asMessage: true, /*is a component*/\n        trigger: '5',\n      },\n      {\n        id: '5',\n        message: ({steps}) =>\n          `Thanks for telling me, son`,\n        end: true\n      }\n    ]}\n  />\n);\n\nexport default ChatAgent;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport ChatAgent from './Chatagent';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChatAgent />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}