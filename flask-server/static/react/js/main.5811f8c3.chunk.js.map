{"version":3,"sources":["Intersect.svg","serviceWorker.js","Welcome.js","EmotionAnalyser.js","ChatAgent.js","loginsignup.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Welcome","console","log","this","props","className","Image","src","WelcomeImage","alt","fluid","width","onClick","React","Component","EmotionAnalyser","_isMounted","state","loading","result","trigger","user_input","previousStep","message","axios","post","user_text","then","response","setState","data","triggerNextStep","catch","error","defaultProps","steps","undefined","ChatAgent","theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","botFontSize","userBubbleColor","userFontColor","headerTitle","botAvatar","id","user","component","waitAction","asMessage","end","errorStyles","color","LoginSignUp","onChange","e","target","value","changeView","view","currentView","name","password","email","error_text","onSubmit","onSubmitSignUp","style","type","required","onSubmitLogin","bind","event","preventDefault","success","App","welcome","chat","changeWelcome","changeLogin","loginsignup","chatagent","Container","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.5811f8c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/Intersect.c4e6c700.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport WelcomeImage from './Intersect.svg'\r\nimport Image from 'react-bootstrap/Image'\r\n\r\n\r\nclass Welcome extends React.Component{\r\n\r\n\r\n  render(){\r\n    console.log(this.props)\r\n\r\n    return(\r\n      <div className=\"welcome-container\">\r\n\r\n        <Image src={WelcomeImage} alt=\"Image\" fluid width=\"500\" onClick={this.props.onClick}/>\r\n        \r\n        <div className=\"welcome-content\">\r\n          <div className=\"text_shadows\">\r\n          Hello, I'm AIsha\r\n          </div>\r\n        </div>\r\n      \r\n      </div>\r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default Welcome","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ChatBot, { Loading } from 'react-simple-chatbot';\r\nimport axios from 'axios';\r\n\r\n\r\nclass EmotionAnalyser extends Component {\r\n  _isMounted = false;\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loading: true,\r\n      result: '',\r\n      trigger: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true\r\n    var user_input = this.props.previousStep.message\r\n    axios.post('/api/help',{\r\n      user_text: user_input \r\n    })\r\n    .then((response) => {\r\n      if(this._isMounted){\r\n        console.log(\"We're inside the response\")\r\n        console.log(\"We're about to setState\")\r\n        this.setState({\r\n          loading: false, \r\n          result: response.data['bot_response'],\r\n          trigger: true\r\n        }, ()=> {\r\n            this.props.triggerNextStep()\r\n        })\r\n      }\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    console.log(\"We're about to componentWillUnmount\")\r\n    this._isMounted = false;\r\n  }\r\n\r\n  render() {\r\n    const { trigger, loading, result } = this.state;\r\n\r\n    return (\r\n      <div className=\"dbpedia\">\r\n        { loading ? <Loading /> : result }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nEmotionAnalyser.propTypes = {\r\n  steps: PropTypes.object,\r\n  triggerNextStep: PropTypes.func,\r\n};\r\n\r\nEmotionAnalyser.defaultProps = {\r\n  steps: undefined,\r\n  triggerNextStep: undefined,\r\n};\r\n\r\nexport default EmotionAnalyser","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ChatBot, { Loading } from 'react-simple-chatbot';\r\nimport EmotionAnalyser from './EmotionAnalyser'\r\nimport WelcomeImage from './Intersect.svg'\r\nimport {ThemeProvider} from 'styled-components'\r\n\r\n\r\nclass ChatAgent extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n\r\n  }\r\n  \r\n  render(){\r\n    const theme =  {\r\n      background: '#f5f8fb',\r\n      fontFamily: 'Sans Serif',\r\n      headerBgColor: '#EF6C00',\r\n      headerFontColor: '#fff',\r\n      headerFontSize: '20px',\r\n      botBubbleColor: '#0368F5',\r\n      botFontColor: '#fff',\r\n      botFontSize: '18px',\r\n      userBubbleColor: '#EA8C55',\r\n      userFontColor: '#fff',\r\n    }\r\n\r\n    return(\r\n      <div className=\"chatagent-container\">\r\n        <ThemeProvider theme={theme}>\r\n          <ChatBot\r\n            headerTitle=\"AIsha\"\r\n            botAvatar = {WelcomeImage}\r\n            // speechSynthesis={{ enable: true, lang: 'en' }}\r\n            steps={[\r\n              {\r\n                id: '1',\r\n                message: \"Hi, I'm AIsha\",\r\n                trigger: '2',\r\n              },\r\n              {\r\n                id: '2',\r\n                message: \"I'm here to help you\",\r\n                trigger: '3'\r\n              },\r\n              {\r\n                id: '3',\r\n                message: \"How are you feeling?\",\r\n                trigger: 'emotion'\r\n              },\r\n              {\r\n                id: 'emotion',\r\n                user: true,\r\n                trigger: '4',\r\n              },\r\n              {\r\n                id: '4',\r\n                component: <EmotionAnalyser />,\r\n                waitAction: true,\r\n                asMessage: true, /*is a component*/\r\n                trigger: '5',\r\n              },\r\n              {\r\n                id: '5',\r\n                message: ({steps}) =>\r\n                  `Thanks for telling me, son`,\r\n                end: true\r\n              }\r\n            ]}\r\n          />\r\n        </ThemeProvider>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default ChatAgent;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport axios from 'axios';\r\nimport './loginsignup.scss';\r\n\r\nconst { Component } = React\r\n\r\nconst errorStyles = {\r\n  color: 'red'\r\n};\r\nclass LoginSignUp extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      currentView: \"signUp\",\r\n      name: '',\r\n      password: '',\r\n      email: '',\r\n      error: '',\r\n      error_text: ''\r\n    }\r\n    this.onSubmitSignUp=this.onSubmitSignUp.bind(this);\r\n    this.onSubmitLogin=this.onSubmitLogin.bind(this);\r\n    this.onChange=this.onChange.bind(this);\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  }\r\n\r\n  onSubmitSignUp(event){\r\n\r\n    event.preventDefault();\r\n    var email = this.state.email\r\n    var name = this.state.name\r\n    var password = this.state.password\r\n    \r\n    axios.post('/signup',{\r\n      email: email,\r\n      name: name,\r\n      password: password\r\n    })\r\n    .then((response) => {\r\n        console.log(\"sign up response recieved\")\r\n        console.log(response.data.error)\r\n        console.log(response.data.data)\r\n        if (response.data.error === true){\r\n          this.setState({\r\n            error: true,\r\n            error_text: response.data.data\r\n         })\r\n        } else {\r\n          this.props.success()\r\n        }\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  onSubmitLogin(event){\r\n\r\n    event.preventDefault();\r\n    var email = this.state.email\r\n    var password = this.state.password\r\n    \r\n    axios.post('/login',{\r\n      email: email,\r\n      password: password\r\n    })\r\n    .then((response) => {\r\n      console.log(\"login response recieved\")\r\n      console.log(response.data.error)\r\n      console.log(response.data.data)\r\n      if (response.data.error === true){\r\n        this.setState({\r\n          error: true,\r\n          error_text: response.data.data\r\n       })\r\n      } else {\r\n        this.props.success()\r\n      }\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  changeView = (view) => {\r\n    this.setState({\r\n      currentView: view,\r\n      name: '',\r\n      password: '',\r\n      email: '',\r\n      error: '',\r\n      error_text: ''\r\n    })\r\n  }\r\n \r\n  currentView = () => {\r\n    switch(this.state.currentView) {\r\n      case \"signUp\":\r\n        return (\r\n          <form onSubmit={this.onSubmitSignUp}>\r\n            <h2>Sign Up!</h2>\r\n            <fieldset>\r\n              <legend>Create Account</legend>\r\n              <ul>\r\n                <li>\r\n                  <label style={errorStyles}>{this.state.error_text}</label>\r\n                </li>\r\n                <li>\r\n                  <label>Name:<br></br>\r\n                    <input type=\"text\" onChange={this.onChange} value={this.state.name} id=\"name\" required/>\r\n                  </label>\r\n                </li>\r\n                <li>\r\n                  <label>Email:<br></br>\r\n                    <input type=\"email\" onChange={this.onChange} value={this.state.email} id=\"email\" required/>\r\n                  </label>\r\n                </li>\r\n                <li>\r\n                  <label>Password:<br></br>\r\n                    <input type=\"password\" onChange={this.onChange} value={this.state.password} id=\"password\" required/>\r\n                  </label>\r\n                </li>\r\n              </ul>\r\n            </fieldset>\r\n            <button>Submit</button>\r\n            <button type=\"button\" onClick={ () => this.changeView(\"logIn\")}>Have an Account?</button>\r\n          </form>\r\n        )\r\n      case \"logIn\":\r\n        return (\r\n          <form onSubmit={this.onSubmitLogin}>\r\n            <h2>Welcome Back!</h2>\r\n            <fieldset>\r\n              <legend>Log In</legend>\r\n              <ul>\r\n                <li>\r\n                  <label style={errorStyles}>{this.state.error_text}</label>\r\n                </li>\r\n                <li>\r\n                  <label>Email:<br></br>\r\n                    <input type=\"email\" id=\"email\" onChange={this.onChange} value={this.state.email} required/>\r\n                  </label>\r\n                </li>\r\n                <li>\r\n                  <label>Password:<br></br>\r\n                    <input type=\"password\" id=\"password\" onChange={this.onChange} value={this.state.password} required/>\r\n                  </label>\r\n                </li>\r\n              </ul>\r\n            </fieldset>\r\n            <button>Login</button>\r\n            <button type=\"button\" onClick={ () => this.changeView(\"signUp\")}>Create an Account</button>\r\n          </form>\r\n        )\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section id=\"entry-page\">\r\n        {this.currentView()}\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoginSignUp","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport Welcome from './Welcome';\r\nimport Container from 'react-bootstrap/Container'\r\nimport './App.scss'\r\nimport ChatAgent from './ChatAgent';\r\nimport LoginSignUp from './loginsignup'\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      welcome: true,\r\n      chat: false\r\n    }\r\n    this.changeWelcome=this.changeWelcome.bind(this)\r\n    this.changeLogin = this.changeLogin.bind(this)\r\n  }\r\n\r\n  changeWelcome(){\r\n    this.setState({\r\n      welcome: false\r\n    })\r\n  }\r\n\r\n  changeLogin(){\r\n    this.setState({\r\n      chat:true\r\n    })\r\n  }\r\n\r\n  render(){\r\n    let welcome = (\r\n      <Welcome onClick={this.changeWelcome} />\r\n    )\r\n    let loginsignup = null;\r\n    let chatagent = null;\r\n\r\n    if(this.state.welcome===false){\r\n      welcome = null;\r\n      loginsignup = (\r\n        <LoginSignUp success={this.changeLogin} />\r\n      )\r\n    }\r\n\r\n    if(this.state.chat===true){\r\n      loginsignup = null;\r\n      chatagent = (\r\n        <ChatAgent />\r\n      )\r\n    }\r\n\r\n    return(\r\n      <Container>\r\n        {welcome}\r\n        {loginsignup}\r\n        {chatagent}\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}