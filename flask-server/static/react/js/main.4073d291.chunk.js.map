{"version":3,"sources":["TextBox.js","serviceWorker.js","index.js"],"names":["TextBox","props","state","formSubmit","onSubmit","bind","onResponseChange","event","this","setState","user_input","target","value","preventDefault","axios","post","user_text","then","response","data","catch","error","console","log","data-testid","type","name","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+SAqEeA,E,kDAhEb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAS,CACZC,YAAY,GAGd,EAAKC,SAAS,EAAKA,SAASC,KAAd,gBACd,EAAKC,iBAAiB,EAAKA,iBAAiBD,KAAtB,gBARN,E,6DAWDE,GACfC,KAAKC,SAAS,CACZC,WAAYH,EAAMI,OAAOC,U,+BAIpBL,GAAO,IAAD,OACTG,EAAaF,KAAKN,MAAMQ,WAC5BH,EAAMM,iBACNC,IAAMC,KAAK,YAAY,CACrBC,UAAWN,IAEZO,MAAK,SAACC,GACL,EAAKT,SAAS,CACZN,YAAY,EACZe,SAAUA,EAASC,KAAT,kBAIbC,OAAM,SAAUC,GACfC,QAAQC,IAAIF,Q,+BAKd,IAAIH,EAAW,KAYf,OAV6B,IAA1BV,KAAKN,MAAMC,aACZe,EACE,6BACE,uBAAGM,cAAY,YACZhB,KAAKN,MAAMgB,YAQlB,6BACE,0BAAMd,SAAUI,KAAKJ,UACnB,uCACE,2BAAOqB,KAAK,OAAOC,KAAK,YAAYC,SAAUnB,KAAKF,oBAErD,2BAAOmB,KAAK,SAASb,MAAM,YAE5BM,O,GA1DaU,IAAMC,WCQRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdxB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMwB,c","file":"js/main.4073d291.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nclass TextBox extends React.Component{\n  constructor(props){\n    super(props)\n\n    this.state = ({\n      formSubmit: false\n    })\n\n    this.onSubmit=this.onSubmit.bind(this);\n    this.onResponseChange=this.onResponseChange.bind(this);\n  }\n\n  onResponseChange(event) {\n    this.setState({\n      user_input: event.target.value\n    })\n  }\n\n  onSubmit(event){\n    var user_input = this.state.user_input\n    event.preventDefault();\n    axios.post('/api/help',{\n      user_text: user_input \n    })\n    .then((response) => {\n      this.setState({\n        formSubmit: true,\n        response: response.data['bot_response']\n      })\n\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  render() {\n    let response = null;\n\n    if(this.state.formSubmit === true){\n      response = (\n        <div>\n          <p data-testid=\"response\">\n            {this.state.response}\n          </p>\n        </div>\n      )\n    }\n    \n    return(\n\n      <div>\n        <form onSubmit={this.onSubmit}>\n          <label>Input\n            <input type=\"text\" name=\"user_text\" onChange={this.onResponseChange}></input>\n          </label>\n          <input type=\"submit\" value=\"Submit\"></input>\n        </form>\n        {response}\n      </div>\n\n     );\n  }\n}\n\nexport default TextBox;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TextBox from './TextBox';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TextBox />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}